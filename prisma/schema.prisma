// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  // for yarn monorepos
  // provider = "prisma-nestjs-graphql"
  output   = "./generated/types"
  reExport = All
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WorkspaceMemberRole {
  OWNER
  ADMIN
  USER
}

enum TaskRole {
  CREATOR
  OBSERVER
  EXECUTOR
}

model Workspace {
  uuid         String                @id @default(uuid())
  name         String
  createdAt    DateTime              @default(now()) @map("created_at")
  updatedAt    DateTime              @updatedAt @map("updated_at")
  members      WorkspaceMember[]
  tasks        Task[]
  taskStatuses WorkspaceTaskStatus[]
  user         User[]

  @@map("workspaces")
}

model WorkspaceMember {
  uuid        String              @id @default(uuid())
  user        User                @relation(fields: [userId], references: [uuid], onDelete: Cascade)
  userId      String              @map("user_id")
  workspace   Workspace           @relation(fields: [workspaceId], references: [uuid], onDelete: Cascade)
  workspaceId String              @map("workspace_id")
  role        WorkspaceMemberRole @default(USER)
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")
  tasks       AssignedMember[]

  @@map("workspace_members")
}

model Task {
  uuid            String              @id @default(uuid())
  title           String              @db.VarChar(255)
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")
  workspace       Workspace           @relation(fields: [workspaceId], references: [uuid], onDelete: Cascade)
  workspaceId     String              @map("worksapce_id")
  assignedMembers AssignedMember[]
  status          WorkspaceTaskStatus @relation(fields: [statusId], references: [uuid])
  statusId        String              @map("status_id")

  @@map("tasks")
}

model AssignedMember {
  memberId String          @map("member_id")
  member   WorkspaceMember @relation(fields: [memberId], references: [uuid], onDelete: Cascade)
  taskId   String          @map("task_id")
  task     Task            @relation(fields: [taskId], references: [uuid], onDelete: Cascade)
  role     TaskRole        @default(EXECUTOR)

  @@id([memberId, taskId])
  @@map("assigned_members")
}

model User {
  uuid                   String            @id @default(uuid())
  email                  String            @unique
  firstName              String            @map("first_name")
  lastName               String            @map("last_name")
  createdAt              DateTime          @default(now()) @map("created_at")
  updatedAt              DateTime          @updatedAt @map("updated_at")
  workspaceParticipation WorkspaceMember[]
  currentWorkspace       Workspace?        @relation(fields: [currentWorkspaceId], references: [uuid])
  currentWorkspaceId     String?           @map("current_workspace_id")

  @@map("users")
}

model UserIdentity {
  uuid         String  @id @default(uuid())
  email        String  @unique
  password     String
  refreshToken String? @map("refresh_token")

  @@map("users_identity")
}

model WorkspaceTaskStatus {
  uuid        String    @id @default(uuid())
  title       String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  workspace   Workspace @relation(fields: [workspaceId], references: [uuid], onDelete: Cascade)
  workspaceId String    @map("workspace_id")
  tasks       Task[]
  order       Int       @default(1)

  @@map("workspace_task_statuses")
}
